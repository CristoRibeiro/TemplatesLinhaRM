<#@ template hostspecific="true" language="C#" #>
<#@ parameter type="System.String" name="NomeClasse" #>
<#@ parameter type="System.String" name="NomeNameSpace" #>
<#@ parameter type="System.String" name="NomeResource" #>
<#@ parameter type="System.String" name="NomeEntidade" #>
<#@ parameter type="System.String" name="NomeDto" #>
<#@ parameter type="System.String" name="NomeInstanciaDto" #>
<#@ parameter type="System.String" name="NomeModulo" #>
using RM.Lib.Server;
using RM.Lib;
using System;
using RM.Sau.Extensions;
using RM.Lib.Notification;
using System.ServiceModel;

namespace <#= NomeNameSpace #>
{
  [ServiceBehavior(IncludeExceptionDetailInFaults = true)]
  [RMSServerInfo(typeof(Properties.Resources), nameof(Properties.Resources.<#= NomeResource #>), CodSistema.Sau)]
  public class <#= NomeClasse #> : RMSServer, I<#= NomeClasse #>
  {
    public INotification <#= NomeEntidade #>(<#= NomeDto #> <#= NomeInstanciaDto #>)
    {
      InitServer();

      var notification = Notification.Instance;
      try
      {
        DBS.BeginTransaction();

        using (var mod = CreateModule<I<#= NomeModulo #>>("<#= NomeModulo #>"))
        {
          mod.ObterLista<#= NomeEntidade #>(1,1);
        }
      }
      catch (Exception e)
      {
        notification.AddError(ExceptionExtensions.CompleteMessage(e));
      }
      finally
      {
        if (DBS.InTransaction)
        {
          if (notification.HasWarnings || notification.HasErrors)
            DBS.Rollback();
          else
            DBS.Commit();
        }
      }

      return notification;
    }
  }
}